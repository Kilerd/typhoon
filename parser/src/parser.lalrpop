use std::str::FromStr;
use ast::*;
#[LALR]
grammar;


Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};



pub Module: Box<Module> = {
    <m: (<ModuleItem>)*> => Box::new(Module::new(m)),
}


pub ModuleItem: Box<ModuleItem> = {
    FunctionDeclare,
    StructDeclare,
}

pub FunctionDeclare: Box<ModuleItem> = { "fn" <name: Identifier> "(" ")" "->" <ret: Type> <content:BlockExpression<ExpressionWithoutBlock>> => Box::new(ModuleItem::FunctionDeclare(name, ret, content)) }

pub StructDeclare: Box<ModuleItem> = { "struct" <name:Identifier> "{" <v: Comma<StructDefineField>> "}" => Box::new(ModuleItem::StructDeclare(StructDetail::new(name, v))) }



BlockExpression<T>: Box<Expr> = { "{"   <s: (Statement)*> <e: (Expression<T>)?>    "}"  => Box::new(Expr::Block(s, e)) }


pub StructDefineField: (String, String) = {
    <k: Identifier> ":" <v: Type> => (k ,v)
}

pub Statement: Box<Statement> = {
    "let" <i:Identifier>  ":" <t: Type> "=" <e:Expression<ExpressionWithoutBlock>> ";" => Box::new(Statement::Declare(i, t, e)),
    ReturnStatement,
    <ExpressionStatement> ";",
}

pub ReturnStatement: Box<Statement>  =  { "return" <Expression<ExpressionWithoutBlock>> ";" => Box::new(Statement::Return(<>)) }
pub ExpressionStatement: Box<Statement> = { <e: Expression<ExpressionWithoutBlock>> ";" => Box::new(Statement::Expr(e)) }




Expression<T>: Box<Expr> = {  ExpressionWithBlock, T  }

pub ExpressionWithBlock: Box<Expr> = {  BlockExpression<ExpressionWithoutBlock> }

pub ExpressionWithoutBlock: Box<Expr> = {
    ExpressionWithoutBlockWithoutArithmetic,
    ArithmeticExpression,
}
pub ExpressionWithoutBlockWithoutArithmetic: Box<Expr> = {
    FieldAccessExpression,
    PathExpression,
    LiteralExpression,
    CallExpression,
    GroupedExpression,
}


pub LiteralExpression:      Box<Expr> = {
    <Num> => Box::new(Expr::Number(<>))
}
pub FieldAccessExpression:  Box<Expr> = {
    <ident:Expression<ExpressionWithoutBlockWithoutArithmetic>> "." <field: Identifier>        => Box::new(Expr::Field(ident, field))}

pub PathExpression:         Box<Expr> = {
    <Identifier>                                      => Box::new(Expr::Identifier(<>)),}

pub CallIdentifier: Box<Expr> = { GroupedExpression , PathExpression}
pub CallExpression:         Box<Expr> = {
    <e: ExpressionWithoutBlockWithoutArithmetic> "(" <f: Comma<ExpressionWithoutBlock>> ")"    => Box::new(Expr::Call(e, f))}

pub GroupedExpression:      Box<Expr> = {
    "(" <ExpressionWithoutBlock> ")" => Box::new(Expr::Group(<>)) }

pub ArithmeticExpression:   Box<Expr> = {
    <lhs: ExpressionWithoutBlock> "+" <rhs: ExpressionWithoutBlockWithoutArithmetic>           => Box::new(Expr::BinOperation(Opcode::Add, lhs,rhs))  ,

   // ExpressionWithoutBlockWithoutArithmetic,
}



Identifier : String = <r"[a-zA-z_][a-zA-z0-9_]*"> => <>.to_string();

Type : String = <r"[a-zA-z_][a-zA-z0-9_]*"> => <>.to_string();



Num: Number = {
    <r"-?[0-9][0-9_]*">         => Number::Integer32(i32::from_str(&<>.replace("_", "")).unwrap()),

    <r"-?[0-9][0-9_]*i8">       => Number::Integer8(i8::from_str(&<>.replace("i8", "").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*i16">      => Number::Integer16(i16::from_str(&<>.replace("i16","").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*i32">      => Number::Integer32(i32::from_str(&<>.replace("i32","").replace("_", "")).unwrap()),
    //<r"-?[0-9][0-9_]*i64">    => Number::Integer64(i64::from_str(&<>.replace("i64","").replace("_", "")).unwrap()),

    <r"[0-9][0-9_]*u8">         => Number::UnSignInteger8(u8::from_str(&<>.replace("u8", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*u16">        => Number::UnSignInteger16(u16::from_str(&<>.replace("u16", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*u32">        => Number::UnSignInteger32(u32::from_str(&<>.replace("u32", "").replace("_", "")).unwrap()),
    //<r"[0-9][0-9_]*u64">      => Number::UnSignInteger64(u64::from_str(&<>.replace("u64", "").replace("_", "")).unwrap()),
}
