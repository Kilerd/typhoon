use std::str::FromStr;
use crate::handler::*;
use ast::*;
//#[LALR]
grammar;


Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};



pub Module: Box<Module> = {
    <m: (<ModuleItem>)*> => Box::new(Module::new(m)),
}


pub ModuleItem: Box<ModuleItem> = {
    FunctionDeclare,
    StructDeclare,
}

pub FunctionDeclare: Box<ModuleItem> = { "fn" <name: Identifier> "(" ")" "->" <ret: Type> <content:BlockExpression> => Box::new(ModuleItem::FunctionDeclare(name, ret, content)) }

pub StructDeclare: Box<ModuleItem> = { "struct" <name:Identifier> "{" <v: Comma<StructDefineField>> "}" =>  struct_declare_handler(name, v) }

pub StructDefineField: (String, String) = {
    <k: Identifier> ":" <v: Type> => (k ,v)
}

BlockExpression: Box<Expr> = { "{"   <s: (Statement)*> <e: (Expression)?>    "}"  => Box::new(Expr::Block(s, e)) }

pub Statement: Box<Statement> = {
    "let" <i:Identifier>  ":" <t: Type> "=" <e:Expression> ";" => Box::new(Statement::Declare(i, t, e)),
    ReturnStatement,
    <ExpressionStatement> ";",
}

pub ReturnStatement: Box<Statement>  =  { "return" <Expression> ";" => Box::new(Statement::Return(<>)) }
pub ExpressionStatement: Box<Statement> = { <e: Expression> ";" => Box::new(Statement::Expr(e)) }


Expression: Box<Expr> = {  ArithmeticExpression }


pub ArithmeticExpression:   Box<Expr> = {
    <lhs: ArithmeticExpression> "+" <rhs: PathExpression>           => Box::new(Expr::BinOperation(Opcode::Add, lhs,rhs)),
    <lhs: ArithmeticExpression> "-" <rhs: PathExpression>           => Box::new(Expr::BinOperation(Opcode::Sub, lhs,rhs)),
    <atom: PathExpression> => atom,
}

// Expr
// todo! Epxr::Expr::Expr
pub PathExpression:         Box<Expr> = {
    GroupExpression
}

pub GroupExpression: Box<Expr> = {
    "(" <CallExpression> ")" => Box::new(Expr::Group(<>)),
    CallExpression
}


// Expr(param, param, param,)
pub CallExpression:         Box<Expr> = {
    <e: FieldAccessExpression> "(" <f: Comma<FieldAccessExpression>> ")"    => Box::new(Expr::Call(e, f)),
    FieldAccessExpression
}

// Expr.Ident
pub FieldAccessExpression:  Box<Expr> = {
//   expression without arithmetic
    <ident:CallExpression> "." <field: LiteralExpression>        => Box::new(Expr::Field(ident, field)),
    LiteralExpression
}






// Num
pub LiteralExpression:      Box<Expr> = {
    <NegativeNumber> => Box::new(<>),
    <Identifier> => Box::new(Expr::Identifier(<>)),
    BlockExpression
}


pub CallIdentifier: Box<Expr> = {
    PathExpression
}


Identifier : String = <r"[a-zA-z_][a-zA-z0-9_]*"> => <>.to_string();

Type : String = <r"[a-zA-z_][a-zA-z0-9_]*"> => <>.to_string();

NegativeNumber: Expr ={
    "-" <Num> => Expr::Negative(Box::new(<>)),
    <Num> => Expr::Number(<>)
}


Num: Number = {
    <r"[0-9][0-9_]*">         => Number::Integer32(i32::from_str(&<>.replace("_", "")).unwrap()),

    <r"[0-9][0-9_]*i8">       => Number::Integer8(i8::from_str(&<>.replace("i8", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*i16">      => Number::Integer16(i16::from_str(&<>.replace("i16","").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*i32">      => Number::Integer32(i32::from_str(&<>.replace("i32","").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*u8">         => Number::UnSignInteger8(u8::from_str(&<>.replace("u8", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*u16">        => Number::UnSignInteger16(u16::from_str(&<>.replace("u16", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*u32">        => Number::UnSignInteger32(u32::from_str(&<>.replace("u32", "").replace("_", "")).unwrap()),
    //<r"[0-9][0-9_]*u64">      => Number::UnSignInteger64(u64::from_str(&<>.replace("u64", "").replace("_", "")).unwrap()),
}
