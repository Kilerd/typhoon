module = {SOI ~ module_item* ~ EOI}
module_item = {struct_define | function_declare}

struct_define = { "struct"  ~ identifier ~ "{" ~ struct_items? ~ "}" }
struct_items = { struct_item ~ ("," ~ struct_item)* ~ ","? }
struct_item = {identifier ~ ":" ~ ttype}


function_declare = {"fn" ~ identifier~ "("~function_parameters?~")"~ "->" ~ ttype ~ block_expression }
function_parameters = {function_parameter ~ ("," ~ function_parameter)* ~ ","?}
function_parameter = {identifier ~ ":" ~ ttype}


block_expression = {"{" ~ statements? ~ expression? ~  "}"}
statements = { statement+}
statement = {let_statement | return_statement | expression_statement}

let_statement = {"let" ~ identifier~ ":" ~ ttype ~ "=" ~ expression ~ ";"}
return_statement = {"return"~ expression~ ";"}
expression_statement = {expression ~ ";"}

expression = {sum}
sum = {multiple ~ (sum_more)*}
sum_more = {sum_op ~ multiple}

multiple = {call ~ multiple_more*}
multiple_more = {time_op ~ call}


call = {(field_access ~ "("~ call_parameters~ ")") | field_access}
call_parameters = {expression ~ ("," ~ expression)* ~ ","?}

field_access = {atom ~("."~ atom)* }


atom = {identifier | number | string | ("("~expression~")") | block_expression}

sum_op = {"+"|"-"}
time_op = {"*" | "/"}

ttype = {identifier | "("~")"}
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = {negative_number | positive_number}
negative_number = ${"-" ~ number}
positive_number = @{primitive_number ~ ("i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64")?  }

primitive_number = @{ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }

WHITESPACE = _{" " | "\t" | "\n" | "\n\r"}
