use std::str::FromStr;
use crate::ast::*;
grammar;


Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Module: Box<Module> = {
    <m: (<ModuleItem>)*> => Box::new(Module::new(m)),
}

pub ModuleItem: Box<ModuleItem> = {
     "fn" <name:Identifier> "(" ")" "->" <ret:Identifier> "{" <v: (<Statement> r"\n"*)*> "}" => Box::new(ModuleItem::Function(Function::new(name, ret, v))),
     "struct" <name:Identifier> "{" <v: Comma<StructDefineField>> "}" => Box::new(ModuleItem::StructDefine(StructDetail::new(name, v))),
}

pub StructDefineField: (String, String) = {
    <k: Identifier> ":" <v: Identifier> => (k ,v)
}

pub Statement: Box<Statement> = {
    "let" <i:Identifier>  ":" <t: Identifier> "=" <e:Expr> ";" => Box::new(Statement::Assign(i, t, e)),
    "return" <e:Expr> ";" => Box::new(Statement::Return(e)),
}


// expr
pub Expr: Box<Expr> = {
    <l:Expr> "|" <r:XorExpr> => Box::new(Expr::Or(l, r)),
    XorExpr,
}
pub XorExpr : Box<Expr> = {
    <l:XorExpr> "^" <r:AndExpr> => Box::new(Expr::Xor(l, r)),
    AndExpr,
}
pub AndExpr : Box<Expr> = {
    <l:AndExpr> "&" <r:ShiftExpr> => Box::new(Expr::And(l, r)),
    ShiftExpr,
}
pub ShiftExpr: Box<Expr> = {
    <l:ShiftExpr> "<<" <r:ArithExpr> => Box::new(Expr::LShift(l,r)),
    <l:ShiftExpr> ">>" <r:ArithExpr> => Box::new(Expr::RShift(l,r)),
    ArithExpr,
}

pub ArithExpr : Box<Expr> = {
    <l:ArithExpr> "+" <r:TermExpr> => Box::new(Expr::Add(l,r)),
    <l:ArithExpr> "-" <r:TermExpr> => Box::new(Expr::Sub(l,r)),
    TermExpr,
}

pub TermExpr : Box<Expr> = {
    <l:TermExpr> "*" <r:Factor> => Box::new(Expr::Mul(l,r)),
    <l:TermExpr> "/" <r:Factor> => Box::new(Expr::Div(l,r)),
    <l:TermExpr> "%" <r:Factor> => Box::new(Expr::Mod(l,r)),
    Factor,
}

pub Factor: Box<Expr> = {
    <type_identifier: Identifier> "{" <v: Comma<AssignStructField>> "}" => Box::new(Expr::StructAssign(type_identifier, v)),
    <Identifier> => Box::new(Expr::Identifier(<>)),
    <Num> => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",

    // "if" <condition: Expr> "{" <then_body: Expr> "}" "else" "{" <else_body: Expr> "}" => Box::new(Expr::If{condition, then_body, else_body})
}
pub AssignStructField: (String, Box<Expr>) = {
    <k: Identifier> ":" <v: Expr> => (k ,v)
}

Identifier : String = <r"[a-zA-z_][a-zA-z0-9_]*"> => <>.to_string();

match {
    r"-?[0-9][0-9_]*"
} else {
    r"[0-9][0-9_]*",
    _
}

Num: Number = {
    <r"-?[0-9][0-9_]*(i8)?"> => Number::Integer8(i8::from_str(&<>.replace("i8", "").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*(i16)>"> => Number::Integer16(i16::from_str(&<>.replace("i16","").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*(i32)?"> => Number::Integer32(i32::from_str(&<>.replace("i32","").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*(i64)?">  => Number::Integer64(i64::from_str(&<>.replace("i64","").replace("_", "")).unwrap()),
    <r"-?[0-9][0-9_]*"> => Number::Integer32(i32::from_str(&<>.replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*(u8)?"> => Number::UnSignInteger8(u8::from_str(&<>.replace("u8", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*(u16)?">  => Number::UnSignInteger16(u16::from_str(&<>.replace("u16", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*(u32)?">  => Number::UnSignInteger32(u32::from_str(&<>.replace("u32", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*(u64)?">  => Number::UnSignInteger64(u64::from_str(&<>.replace("u64", "").replace("_", "")).unwrap()),
    <r"[0-9][0-9_]*"> => Number::UnSignInteger32(u32::from_str(&<>.replace("_", "")).unwrap()),
}
